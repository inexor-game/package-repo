# libcef PKGBUILD
# written by Benedikt Heine <benedikt@heine.rocks>

# to speedup your configuration, set JOBS to a higher level.
# By default (without declaring it here):
#   - ninja uses $(nproc)+2
#   - gclient uses $(nproc)
#_jobs="-j 1"               # recommended, if you debug the PKGBUILD
#_jobs="-j $(($(nproc)*2))" # recommended, if you have got a powerful internet-connection

# If the login-shell spawned before depot-tools-git is installed,
# gclient and fetch won't get found
export PATH=$PATH:/opt/depot-tools-git

_pkg=libcef 
_pkgver=2526 # the branch you want to be based on.
_buildtype=Release # this defines the buildtype. Debug also possible

pkgname=$_pkg-git
# take this as the branch-name you want to build on
pkgver=2526.1373.b660893
pkgrel=1
pkgdesc="Simple framework for embedding Chromium-based browsers in other applications."
arch=('x86_64')
url="https://bitbucket.org/chromiumembedded/cef"
license=('BSD')

provides=($_pkg)

# TODO: this is empty
# TODO: compare this with the makedepends array and push all really needed packages in depends too
makedepends=(
	'python'
	'python2'
	'gtkglext'
	'libpulse'
	'lsb-release'
	'libxss'
	'libexif'
	'libtinfo'
	'gyp-git'
	'libtinfo'
	'depot-tools-git'
	'nss'
	'gconf'
	'libgnome-keyring'
	'clang'
)
depends=()

source=(
	"$_pkg::git+https://bitbucket.org/chromiumembedded/cef.git"
)
sha256sums=(
	'SKIP'
)

# paths relative to $srcdir
_path_chromium_src=chromium/src
_path_cef_src=$_path_chromium_src/cef
_builddir=out/$_buildtype

pkgver(){
	cd "$srcdir/$_pkg"

	git checkout -B origin/$_pkgver &>> /dev/null
	msg "pkgver: $_pkgver.$(git rev-list --count $_pkgver).$(git describe --always)"
	echo "$_pkgver.$(git rev-list --count $_pkgver).$(git describe --always)"
}

prepare(){
	return 0
	# 1. Use the local installed compiler from ArchLinux
	#    This is neccessary as the pre-shipped ld.gold linker is not compatible to glibc version => 2.23
	#    So we're defining make_clang_dir to point to /usr/bin/clang and remove the shipped ld.gold compiler
	#    after generating everything.
	#
	# 2. Ignore all warnings and *don't* treat them as errors.
	#    The chromium devs are only allowed to merge their code, if it won't produce any warnings.
	#    But we don't want to check our code, we want to build it!
	export GYP_DEFINES="make_clang_dir=/usr werror="

	if [ $(python -c 'import sys; print(sys.version_info.major)') -ne 2 ]; then
		msg "The command 'python' has to point to Python Interpreter Version 2!"
		return 1
	fi

	# cut out the field chromium_checkout from JSON (without drawing new dependencies)
	git -C $srcdir/$_pkg checkout -t origin/$_pkgver &>> /dev/null || git -C $srcdir/$_pkg checkout $_pkgver &>> /dev/null
	_chromium_checkout_ref=$(awk '/chromium_checkout/{print $2}' $srcdir/$_pkg/CHROMIUM_BUILD_COMPATIBILITY.txt | tr -d ,\')

	# quickfix, that gclient can download everything
	export DEPOT_TOOLS_GSUTIL_BIN_DIR=$srcdir/gsutil

	msg "Cloning Chromium"
	mkdir -p $(dirname $srcdir/$_path_chromium_src)
	cd $(dirname $srcdir/$_path_chromium_src)
	[ ! -d "$srcdir/$_path_chromium_src" ] && fetch --nohooks chromium --nosvn=True

	# if you're building a second time, with the same repo,
	# some files are patched in gyp and the submodule checkout
	# will fail because of uncommited changes
	# this resets it, to state before last build
	cd $srcdir/$_path_chromium_src
	gclient recurse $_jobs git reset --hard

	msg "Checking out Chromium commit '$_chromium_checkout_ref'"
	cd $srcdir/$_path_chromium_src
	git fetch
	git checkout $_chromium_checkout_ref

	msg "Getting Chromium Submodule dependencies"
	gclient sync $_jobs --with_branch_heads

	msg "Symlinking CEF into Chromium sourcetree"
	cd $(dirname $srcdir/$_path_cef_src)
	[ -d cef ] && rm -rf cef
	cp -r $srcdir/libcef cef
	cd $srcdir/$_path_cef_src
	git checkout -t origin/$_pkgver || git checkout $_pkgver

	# See note above. Here after generating all sources, we delete the incompatible ld.gold linker.
	rm -rf "$srcdir/$_path_chromium_src/third_party/binutils/Linux_x64/Release/bin/"
}

build(){
	# BUILD CEF
	export GYP_GENERATORS=ninja
	cd $srcdir/$_path_cef_src
	./cef_create_projects.sh
	cd $srcdir/$_path_chromium_src
	ninja -C $_builddir $_jobs cefclient cef_unittests chrome_sandbox libcef_dll_wrapper
}

package(){
	cd $srcdir/$_path_cef_src/tools

	mkdir -p $pkgdir/usr/share/libcef-full-list
	./make_distrib.sh --ninja-build --output-dir=$pkgdir/usr/share/libcef-full-list --minimal

	install -Dm755 $srcdir/$_path_chromium_src/$_builddir/lib/libcef.so "$pkgdir/usr/lib/libcef.so"
	install -Dm755 $srcdir/$_path_chromium_src/$_builddir/obj/cef/libcef_dll_wrapper.a "$pkgdir/usr/lib/libcef_dll_wrapper.a"
	cp -r "$srcdir/$_path_chromium_src/$_builddir/obj/cef/libcef_dll/" "$pkgdir/usr/lib"

	mkdir -p $pkgdir/usr/include/
	cp -r $srcdir/$_path_cef_src/include $pkgdir/usr/include/cef
	# this is a bad fix
	# TODO: contact the author and ask him, how we should change it
	sed -i 's%^#include\s\s*"include/\(.*\)"%#include <cef/\1>%g' $(find $pkgdir/usr/include/ -type f)
}
